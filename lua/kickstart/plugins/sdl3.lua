-- SDL3 Development Support
return {
  {
    'nvim-treesitter/nvim-treesitter',
    opts = {
      ensure_installed = { 'c', 'cpp', 'cmake' },
    },
  },
  {
    'hrsh7th/nvim-cmp',
    dependencies = {
      'hrsh7th/cmp-nvim-lsp',
      'hrsh7th/cmp-buffer',
      'hrsh7th/cmp-path',
      'L3MON4D3/LuaSnip',
      'saadparwaiz1/cmp_luasnip',
    },
    config = function()
      local cmp = require('cmp')
      local luasnip = require('luasnip')

      -- SDL3 snippets
      luasnip.add_snippets('c', {
        luasnip.snippet('sdl3_basic', {
          luasnip.text_node({
            '#include <SDL3/SDL.h>',
            '#include <stdio.h>',
            '',
            'int main(int argc, char* argv[]) {',
            '    if (!SDL_Init(SDL_INIT_VIDEO)) {',
            '        printf("SDL_Init Error: %s\\n", SDL_GetError());',
            '        return 1;',
            '    }',
            '',
            '    SDL_Window* window = SDL_CreateWindow(',
            '        "SDL3 Window",',
            '        640, 480,',
            '        SDL_WINDOW_RESIZABLE',
            '    );',
            '',
            '    if (!window) {',
            '        printf("SDL_CreateWindow Error: %s\\n", SDL_GetError());',
            '        SDL_Quit();',
            '        return 1;',
            '    }',
            '',
            '    SDL_Renderer* renderer = SDL_CreateRenderer(window, NULL);',
            '    if (!renderer) {',
            '        SDL_DestroyWindow(window);',
            '        printf("SDL_CreateRenderer Error: %s\\n", SDL_GetError());',
            '        SDL_Quit();',
            '        return 1;',
            '    }',
            '',
            '    int running = 1;',
            '    SDL_Event event;',
            '',
            '    while (running) {',
            '        while (SDL_PollEvent(&event)) {',
            '            if (event.type == SDL_EVENT_QUIT) {',
            '                running = 0;',
            '            }',
            '        }',
            '',
            '        SDL_SetRenderDrawColor(renderer, 0, 100, 200, 255);',
            '        SDL_RenderClear(renderer);',
            '        SDL_RenderPresent(renderer);',
            '        SDL_Delay(16);',
            '    }',
            '',
            '    SDL_DestroyRenderer(renderer);',
            '    SDL_DestroyWindow(window);',
            '    SDL_Quit();',
            '    return 0;',
            '}',
          }),
        }),
        luasnip.snippet('sdl3_cmake', {
          luasnip.text_node({
            'cmake_minimum_required(VERSION 3.16)',
            'project(' .. luasnip.insert_node(1, 'my_sdl3_project') .. ')',
            '',
            '# Find SDL3 package',
            'find_package(PkgConfig REQUIRED)',
            'pkg_check_modules(SDL3 REQUIRED sdl3)',
            '',
            '# Create executable',
            'add_executable(' .. luasnip.insert_node(2, 'myapp') .. ' ' .. luasnip.insert_node(3, 'main.c') .. ')',
            '',
            '# Link SDL3 libraries',
            'target_include_directories(' .. luasnip.same(2) .. ' PRIVATE ${SDL3_INCLUDE_DIRS})',
            'target_link_directories(' .. luasnip.same(2) .. ' PRIVATE ${SDL3_LIBRARY_DIRS})',
            'target_link_libraries(' .. luasnip.same(2) .. ' ${SDL3_LIBRARIES})',
            'target_compile_options(' .. luasnip.same(2) .. ' PRIVATE ${SDL3_CFLAGS_OTHER})',
            '',
            '# Add rpath for runtime linking (macOS/Linux)',
            'set_target_properties(' .. luasnip.same(2) .. ' PROPERTIES',
            '    INSTALL_RPATH "${SDL3_LIBRARY_DIRS}"',
            '    BUILD_WITH_INSTALL_RPATH TRUE',
            ')',
          }),
        }),
      })
    end,
  },
}
